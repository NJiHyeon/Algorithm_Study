class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        from heapq import heapify, heappop, heappush
        def dijkstra(graph, start_v, n):
            distances = [float("inf")] * (n+1)
            distances[start_v] = 0
            pq = [(0, start_v)]

            while pq:
                cur_dist, cur_v = heapq.heappop(pq)
                if distances[cur_v] >= cur_dist:
                    if cur_v in graph:
                        for next_v, cost in graph[cur_v]:
                            next_dist = distances[cur_v] + cost
                            if distances[next_v] > next_dist:
                                distances[next_v] = next_dist
                                heapq.heappush(pq, (next_dist, next_v))
            return distances[1:]
           
        graph = {}
        for t in times:
            if t[0] in graph:
                graph[t[0]].append((t[1], t[2]))
            else:
                graph[t[0]] = [(t[1], t[2])]

        distances = dijkstra(graph, k, n)

        if max(distances) == float("inf"):
            return -1
        return max(distances)
